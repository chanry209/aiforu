close all;
clear;
clc;
format compact;
%% Bases données

load base2.mat
Bases_ech = Bases';
Bases_ech = reshape(Bases_ech,64,[]);
Bases = Bases_ech;
Bases = Bases';
Targets_ech = Targets';
Targets_ech = reshape(Targets_ech,4,[]);
Targets = Targets_ech(1,:);
Targets = Targets';
%% Normalisation
[Bases,ps] = mapminmax(Bases',-1,1);
Bases = Bases';

%% Etablire base_app et base_test

%  aléatoire à fonder la 20 groupe des bases
Bases = [Targets Bases];
k=rand(1,25000);
[m,n]=sort(k); 
for i = 1:25
Base(i).ind = Bases(n((1000*(i-1)+1):1000*i),:);
end

n1 = input('Choose 3 group of data for trainning the network \n the first : \n');
n2 = input('the second : \n');
n3 = input('the third : \n');

Basep  = [Base(n1).ind;Base(n2).ind;Base(n3).ind];

train_bases  = Basep(:,2:65);
train_bases  = train_bases';
train_labels = Basep(:,1);
label_s = zeros(10,length(train_labels));

for j = 1:length(train_labels)
    label_s(train_labels(j),j) = 1;
end
train_label = label_s;
 
it = input('There are 50 groups for test, which one do you want to try my network?');
baset = Base(it).ind;
test_bases  = baset(:,2:65);
test_bases  = test_bases'; 
test_labels = baset(:,1);
label_s = zeros(10,length(test_labels));
for j = 1:length(test_labels)
    label_s(test_labels(j),j) = 1;
end
test_label = label_s;


%
for j = 1:10
[mtrs,class(j).mono] = GaussianMixture(traindata(j).mono, 20, 20, false);
% disp(sprintf('\toptimal order K*: %d', class(j).mono.K));
% for i=1:class(j).mono.K
%    disp(sprintf('\tCluster %d:', i));
%    disp(sprintf('\t\tpi: %f', class(j).mono.cluster(i).pb));
%    disp([sprintf('\t\tmean: '), mat2str(class(j).mono.cluster(i).mu',6)]);
%    disp([sprintf('\t\tcovar: '), mat2str(class(j).mono.cluster(i).R,6)]);
% end
% temp = strcat('press <Enter> to continue ( The ',num2str(j), 'st group on training)...');
% input(temp);
% disp(' ');
end

% disp('clustering class 2...');
% [mtrs,class2] = GaussianMixture(traindata2, 20, 0, false);
% disp(sprintf('\toptimal order K*: %d', class2.K));
% for i=1:class2.K
%    disp(sprintf('\tCluster %d:', i));
%    disp(sprintf('\t\tpi: %f', class2.cluster(i).pb));
%    disp([sprintf('\t\tmean: '), mat2str(class2.cluster(i).mu',6)]);
%    disp([sprintf('\t\tcovar: '), mat2str(class2.cluster(i).R,6)]);
% end

% disp('performing maximum likelihood classification...');
% disp('for each test vector, the following calculates the log-likelihood given each of the two classes, and classify');
% disp('the first half of the samples are generated from class 1, the remaining half from class 2');
% disp(' ');



for i = 1:10
likelihood(:,i) = GMClassLikelihood(class(i).mono, testdata);
end
%% Critère 1 : 23ms
for i = 1:100000
    m(i)=find(likelihood(i,:)==max(likelihood(i,:)));
end
    
Target = 1:10;
Target = repmat(Target,10000,[]);
Target = Target(:);
Target = Target';
Taux_Reco = numel(find(m == Target))/length(Target);
    
% Critère 1second

for i = 1:2000;
    a = likelihood;
    b = mean(a((((i-1)*50+1):i*50),:));
    y(i)=find(b==max(b));
end

Target = 1:10;
Target = repmat(Target,200,[]);
Target = Target(:);
Target = Target';
Taux_Reco = numel(find(y == Target))/length(Target);


% for n=1:size(testdata,1)
%    disp([mat2str(testdata(n,:),4), sprintf('\tlikelihood: '), mat2str(likelihood(n,:),4), sprintf('\tclass: %d',  class(n))]);
% end
% 
% class_labels = [1 2];
% class_labels = repmat(class_labels,100,[]);
% class_labels = class_labels(:);
% error = numel(find(class_labels~=test_label'));